{"version":3,"sources":["webpack:///./src/components/Upload.vue?e4af","webpack:///./node_modules/@firebase/storage/dist/index.esm2017.js","webpack:///./node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js","webpack:///./src/components/Footmenu.vue?0cee","webpack:///./src/components/Footmenu.vue?a314","webpack:///./src/components/Upload.vue?21de","webpack:///src/components/Upload.vue","webpack:///./src/components/Upload.vue?f45b","webpack:///./src/components/Upload.vue","webpack:///src/components/Footmenu.vue","webpack:///./src/components/Footmenu.vue?bc12","webpack:///./src/components/Footmenu.vue","webpack:///./node_modules/core-js/modules/es.function.name.js"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","code","message","super","prependCode","this","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","length","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","_appDelete","start","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","err","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","undefined","bb","append","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata$2","fullServerUrl","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","argsToForward","connectionFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","responseText","header","listener","upload","removeEventListener","newConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","all","storage","_getAuthToken","_getAppCheckToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","observers","triggered","bind","snapshot","toCall","Reference","_service","_newRef","uploadBytesResumable$1","_throwIfRoot","listAll$1","accumulator","listAllHelper","async","opt","nextPage","list$1","options","op","makeRequestWithTokens","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","request","clear","add","delete","STORAGE_TYPE","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","UploadTaskSnapshotCompat","_delegate","UploadTaskCompat","catch","pause","resume","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","root","parent","r","storageExp","identifier","storageServiceCompat","instance","namespaceExports","Storage","INTERNAL","registerComponent","setServiceProps","registerVersion","render","_vm","_h","$createElement","_c","_self","attrs","clickshow","_e","staticClass","_v","staticRenderFns","uploadFile","computed","files","$store","methods","count","console","log","file","db","collection","doc","docId","docid","lastday","lastModifiedDate","storageRef","put","$router","go","components","show","DESCRIPTORS","FUNCTION_NAME_EXISTS","EXISTS","uncurryThis","FunctionPrototype","Function","functionToString","nameRE","regExpExec","NAME","configurable"],"mappings":"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","file":"js/chunk-18a577ca.0970c78a.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Upload.vue?vue&type=style&index=0&id=179c878b&scoped=true&lang=css&\"","import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     */\r\n    constructor(code, message) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        /**\r\n         * Stores custom error data unque to StorageError.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    /**\r\n     * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(\"unknown\" /* UNKNOWN */, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\r\nfunction start(f, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ncallback, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            f(handler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function handler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable\r\n                    ? progressEvent.total\r\n                    : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer || this.isRetryStatusCode_(status)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponseText());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getResponseText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n    isRetryStatusCode_(status) {\r\n        // The codes for which to retry came from this page:\r\n        // https://cloud.google.com/storage/docs/exponential-backoff\r\n        const isFiveHundredCode = status >= 500 && status < 600;\r\n        const extraRetryCodes = [\r\n            // Request Timeout: web server didn't receive full request in time.\r\n            408,\r\n            // Too Many Requests: you're getting rate-limited, basically.\r\n            429\r\n        ];\r\n        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\r\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getResponseText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* RUNNING */:\r\n        case \"pausing\" /* PAUSING */:\r\n        case \"canceling\" /* CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet connectionFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponseText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponseText() before sending');\r\n        }\r\n        return this.xhr_.responseText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nfunction newConnection() {\r\n    return connectionFactoryOverride\r\n        ? connectionFactoryOverride()\r\n        : new XhrConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this._continueUpload();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* CANCELING */:\r\n                    this._transition(\"canceled\" /* CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* PAUSING */:\r\n                    this._transition(\"paused\" /* PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newConnection, authToken, appCheckToken);\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* CANCELING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"pausing\" /* PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* PAUSING */:\r\n                this._transition(\"paused\" /* PAUSED */);\r\n                break;\r\n            case \"canceling\" /* CANCELING */:\r\n                this._transition(\"canceled\" /* CANCELED */);\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* PAUSED */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* RUNNING */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.8.7\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getDownloadURL, getMetadata, getStorage, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.7\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n//# sourceMappingURL=index.esm2017.js.map\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Footmenu.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"menu\"}},[(_vm.show)?_c('div',{attrs:{\"id\":\"out_hamb\"},on:{\"click\":_vm.clickshow}}):_vm._e(),_c('div',{attrs:{\"id\":\"hamb_menu\"},on:{\"click\":_vm.clickshow}},[_c('span'),_c('span')]),_c('transition',{attrs:{\"name\":\"fade\"}},[(_vm.show)?_c('div',{attrs:{\"id\":\"foot\"}},[_c('router-link',{attrs:{\"to\":\"/album\"}},[_c('button',[_c('i',{staticClass:\"el-icon-menu\"}),_c('br'),_vm._v(\"album\")])]),_c('router-link',{attrs:{\"to\":\"/slide\"}},[_c('button',[_c('i',{staticClass:\"el-icon-files\"}),_c('br'),_vm._v(\"slide\")])]),_c('upload')],1):_vm._e()])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"uploader\"}},[_c('button',[_c('input',{ref:\"preview\",attrs:{\"type\":\"file\"},on:{\"change\":_vm.uploadFile}}),_c('i',{staticClass:\"el-icon-upload2\"}),_c('br'),_vm._v(\"upload\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"uploader\">\n    <button><input type=\"file\" ref=\"preview\" @change=\"uploadFile\"><i class=\"el-icon-upload2\"></i><br>upload</button>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase/compat/app\"\nimport \"firebase/compat/storage\"\nimport \"firebase/compat/firestore\"\n\nexport default {\n  name: 'upload',\n  computed: {\n    files: {\n      get() {\n        return this.$store.state.files\n      },\n      set() {\n        return this.$store.state.files\n      }\n    },\n  },\n  methods: {\n    uploadFile(p) {\n      this.$store.state.count++\n      const file = p.target.files[0]\n      console.log(file)\n\n      const storageRef = firebase.storage().ref('users/user1/pictures/' + file.name)\n\n      const db = firebase.firestore();\n      let docId = db.collection('image-meta').doc().id;\n\n      db.collection('image-meta').doc(docId).set({\n        docid: docId,\n        name: file.name,\n        lastday: file.lastModifiedDate,\n        id: this.$store.state.count\n      })\n\n\n      storageRef.put(file).then(() => {\n        firebase.storage().ref('users/user1/pictures/' + file.name).getDownloadURL().then(() => {\n          setTimeout( function() {\n            this.$router.go({path: this.$router.currentRoute.path, force: true})\n          }.bind(this),1000)\n        }).catch((error) => { \n            console.log(error)\n        })\n      })\n    },\n  }\n}\n</script>\n\n<style scoped>\n#save {\n  position: absolute;\n  top: 50px;\n  left: 0;\n}\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Upload.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Upload.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Upload.vue?vue&type=template&id=179c878b&scoped=true&\"\nimport script from \"./Upload.vue?vue&type=script&lang=js&\"\nexport * from \"./Upload.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Upload.vue?vue&type=style&index=0&id=179c878b&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"179c878b\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"menu\">\n    <div id=\"out_hamb\" v-if=\"show\" @click=\"clickshow\"></div>\n    <div id=\"hamb_menu\" @click=\"clickshow\">\n      <span></span>\n      <span></span>\n    </div>\n    \n    <transition name=\"fade\">\n      <div id=\"foot\" v-if=\"show\">\n        <router-link to=\"/album\"><button><i class=\"el-icon-menu\"></i><br>album</button></router-link>\n        <router-link to=\"/slide\"><button><i class=\"el-icon-files\"></i><br>slide</button></router-link>\n        <upload />\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport upload from './Upload.vue'\n\nexport default {\n  name: 'footmenu',\n  components: {\n    upload\n  },\n  computed: {\n    show() {\n      return this.$store.state.show\n    }\n  },\n  methods: {\n    clickshow() {\n      if(this.$store.state.show == false) {\n        this.$store.state.show = true\n      } else {\n        this.$store.state.show = false\n      }\n    } \n  }\n}\n</script>\n\n\n<style>\n#out_hamb {\n  height: 100vh;\n  width: 100vw;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n\n/* hambmenu */\n#hamb_menu {\n  position: fixed;\n  right: 15px;\n  bottom: 17px;\n  width: 55px;\n  height: 50px;\n  line-height: 6px;\n  padding: 18px 16px;\n  background-color: #FFE3CA;\n  box-shadow: 2px 3px 3px rgb(180, 180, 180);\n  border-radius: 15px;\n}\n\n#hamb_menu span {\n    display: inline-block;\n    width: 24px;\n    border-bottom: 2px solid #FF7A00;\n}\n\n#hamb_menu span:nth-of-type(2) {\n  transform: translateY(-9px) rotate(90deg);\n}\n\n\n#foot {\n  width: 100vw;\n  height: 80px;\n  background-color: rgb(255,255,255);\n  z-index: 100;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n\n  display: flex;\n  text-align: center;\n  color: rgb(88, 35, 0);\n}\n\n#foot a {\n  width: 33%;\n  list-style: none;\n  line-height: 23px;\n  margin: 8px 0;\n  padding: 10px 0;\n\n  font-size: small;\n}\n\n#uploader {\n  width: 33%;\n  list-style: none;\n  line-height: 22px;\n  margin: 8px 0;\n  padding: 10px 0;\n  color: rgb(88, 35, 0);\n  font-size: small;\n  position: relative;\n}\n\nbutton i {\n  font-size: x-large;\n}\n\na {\n  text-decoration: none;\n}\n\nbutton > input {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n\na:link, a:visited, a:hover, a:active {\n  color: rgb(88, 35, 0);\n}\n\na:nth-of-type(2) {\nborder-left: 1px solid rgba(112, 112, 112, 0.3);\nborder-right: 1px solid rgba(112, 112, 112, 0.3);\n}\n\n.fade-enter-active, .fade-leave-active {\n  transform: translate(0px, 0px);\n  transition: transform 300ms;\n}\n\n.fade-enter, .fade-leave-to {\n  transform: translateY(80px);\n} \n\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Footmenu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Footmenu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Footmenu.vue?vue&type=template&id=f33611a4&\"\nimport script from \"./Footmenu.vue?vue&type=script&lang=js&\"\nexport * from \"./Footmenu.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Footmenu.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var DESCRIPTORS = require('../internals/descriptors');\nvar FUNCTION_NAME_EXISTS = require('../internals/function-name').EXISTS;\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar FunctionPrototype = Function.prototype;\nvar functionToString = uncurryThis(FunctionPrototype.toString);\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar regExpExec = uncurryThis(nameRE.exec);\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.es/ecma262/#sec-function-instances-name\nif (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return regExpExec(nameRE, functionToString(this))[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n"],"sourceRoot":""}